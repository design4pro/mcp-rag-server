---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT RULES

- Documentation should be updated after every code change
- All code, comments, and technical documentation should be written in English
- The project follows modern libs-first architecture
- The user prefers using Zod for data validation and schema structure definition
- The project is implementing an MCP RAG server using Qdrant, mem0, and Gemini API, following a phased approach.
- When possible, prefer open-source solutions.
- Qdrant is running locally in Docker and does not require an API key.
- Use a self-hosted and open-source version of mem0. Open source mem0 does not need a key.
- The MCP RAG server health check must be verified to ensure Qdrant, Mem0, and RAG are active.
- Extra inputs are not permitted during config validation. Set `extra = "ignore"` in the Config class of Pydantic models.
- Set `extra = "ignore"` in the Config class of Pydantic models.
- Use basic memory notes for documentation, action plans, and task lists.
- Project documentation is located in `docs/` with phase-specific folders.
- All documentation should use Obsidian-style links `[[filename]]` or `[[folder/filename|Link Text]]`.
- Use basic memory `write_note` tool to generate documentation.
- Before creating new documentation, always ensure you are operating within the correct memory project for this project. If a memory project for this project does not exist, create it, switch to it, and set it as default.
- Documentation files should be structured in subfolders and named in kebab-case format.
- The AI assistant must always ensure it is operating within the correct memory project for this project before creating or updating documentation. If a dedicated memory project does not exist, it should create one and set it as the default.
- Documentation files must be structured in subfolders and named in kebab-case format. This ensures readability, Obsidian compatibility, and easy linking.
- When naming documentation files, use kebab-case (e.g., `installation-guide.md`, `api-reference.md`).
- If a documentation file contains multiple topics, break it down into smaller, atomic notes following Obsidian best practices.
- Internal links should use Obsidian-style links with the new folder structure and kebab-case filenames: `[[04-development/project-refactoring]]` or `[[../03-api/api-reference]]`.
- The documentation folder `docs/` should contain all subfolders and files.
- Documentation, action plans, and task lists must be prepared using basic memory notes.
- When preparing documentation, plan of actions, and lists of tasks, always use the documentation preparation workflow.
- During integration tests, `Mem0Service` must be initialized in a way that **bypasses any external API requirements** and uses only local file-based storage.

## TECH STACK

- MCP (FastMCP)
- Qdrant (vector database)
- mem0 (memory layer for AI personalization)
- Gemini API (embeddings and text generation)
- qdrant-client
- mem0ai>=0.1.110
- google-genai
- Python (>=3.9)
- Pydantic
- Libraries for document chunking
- langchain>=0.1.0
- langchain-text-splitters>=0.0.1
- sentence-transformers>=2.2.0
- numpy>=1.24.0
- tiktoken>=0.5.0
- aiohttp
- fastapi
- uvicorn
- cv2 (OpenCV)
- librosa

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- Project documentation is maintained using Obsidian-style markdown.
- The user prefers the Coursor IDE for `mcpServers` configuration.
- When configuring Coursor IDE, use a `mcpServers.json` file like this:

```json
[
  {
    "name": "MCP RAG Server",
    "description": "Local MCP RAG server with Qdrant (Docker), self-hosted mem0, Gemini API",
    "command": "python",
    "args": ["run_server_http.py"],
    "env": {
      "GEMINI_API_KEY": "your_gemini_api_key_here",
      "QDRANT_URL": "http://localhost:6333",
      "MEM0_SELF_HOSTED": "true",
      "MEM0_LOCAL_STORAGE_PATH": "./mem0_data",
      "FASTMCP_HOST": "127.0.0.1",
      "FASTMCP_PORT": "8001"
    }
  }
]
```

- Troubleshooting documentation is located in `docs/05-troubleshooting/troubleshooting-guide.md`.
- Project documentation is organized following Obsidian best practices.
- Each note should address a single concept (atomic note structure).
- Use Obsidian-style cross-references between related notes.
- Avoid content duplication across documentation.
- Maintain a clear organization and navigation.
- Ensure comprehensive coverage of all topics.
- The `docs/` directory is structured as follows:

```
docs/
├── 00-overview/                    # Metadata and indexes
├── 01-architecture/            # Core functionalities
├── 02-installation/            # System architecture
├── 03-api/                    # Development and testing
├── 04-development/             # Development and testing
├── 05-troubleshooting/              # Operations and monitoring
└── 99-templates/                  # Project phases
```

- Phase documentation is located in `docs/04-development/phases/` with phase-specific folders.
- All documentation should use Obsidian-style links `[[filename]]` or `[[folder/filename|Link Text]]`.
- File naming conventions:
  - `README.md`: Main overview for each phase
  - `implementation-plan.md`: Detailed implementation plans
  - `technical-specs.md`: Technical specifications (when needed)
  - `testing-guide.md`: Testing procedures (when needed)
- Documentation files should be structured in subfolders and named in kebab-case format.
  - Example:
```
docs/
  00-overview/
    project-overview.md
    documentation-index.md
  01-architecture/
    system-architecture.md
  02-installation/
    installation-guide.md
  03-api/
    api-reference.md
  04-development/
    development-phases.md
    project-refactoring.md
  05-troubleshooting/
    troubleshooting-guide.md
```

## CODING STANDARDS

- Configuration files should use Pydantic Settings with validation.
- Set `extra = "ignore"` in the Config class of Pydantic models.

## DEBUGGING

- After changes, always verify the MCP RAG server health check to ensure services (Qdrant, Mem0, Gemini, RAG) are correctly initialized and running.
- Use the `test_connections.py` script to check service connections.
- Enable debug logging by setting `LOG_LEVEL=DEBUG` when running the server.
- Check service logs for Docker-based services using `docker logs <container_id>`.
- Ensure Qdrant is running correctly. Use `curl http://localhost:6333/` to check that Qdrant is accessible, and confirm the response indicates the service is running.
- Ensure self-hosted mem0 works without needing an API key.
- During integration tests, `Mem0Service` must be initialized in a way that **bypasses any external API requirements** and uses only local file-based storage.
- If `get_memory_context` or `get_user_memories` from `Mem0Service` raises an error, ensure that the methods `get_relevant_memories` and `get_memories` are implemented in `Mem0Service`.
- If `list_documents` or `get_document_stats` from `QdrantService` raises an error, ensure the `list_documents` method is implemented in `QdrantService`.
- If `get_document` returns "Document not found," verify that the document ID exists in the Qdrant collection.

## WORKFLOW & RELEASE RULES

- Always stage all changes using `git add .` before committing.
- Commit changes with descriptive messages, including details of reorganizations, new files, updates, and cleanup.
- Always check `git status` before committing to review changes.
- After committing, verify there are no remaining untracked files (excluding auto-generated files like SpecStory history files, unless specifically needed).
- Before moving to the next task, always check the current project status and action plan.
- The project will be developed in phases:
  - Phase 1: Foundations (High Priority)
    - [x] Initialize Python project with dependencies
    - [x] Implement basic MCP server
    - [x] Configure environment management
    - [x] Integrate Gemini API for embeddings
    - [x] Basic Qdrant service
  - Phase 2: RAG Core (High Priority)
    - [x] Document processing pipeline
    - [x] Embedding generation
    - [x] Vector storage and search system
    - [x] Basic search functionality
    - [x] RAG query pipeline
  - Phase 3: MCP Integration (Medium Priority) - **COMPLETED**
    - [x] Document management tools (comprehensive implementation)
    - [x] Search and query tools (comprehensive implementation)
    - [x] Memory management tools (comprehensive implementation)
    - [x] Data access resources (document and memory resources)
    - [x] Error handling and validation (Pydantic schemas)
    - [x] Complete MCP tool registration system
    - [x] Proper tool and resource organization
  - Phase 4: Memory Integration (Medium Priority) - **COMPLETED**
    - [x] mem0 service integration (basic setup)
    - [x] Memory storage infrastructure
    - [x] Basic memory CRUD operations
    - [x] Memory-aware RAG queries with semantic search (COMPLETED)
    - [x] User session management
    - [x] Advanced memory context retrieval
  - Phase 5: Advanced Features (Low Priority) - **COMPLETED**
    - [x] Document preprocessing and chunking improvements
    - [x] Advanced search filters
    - [x] Performance monitoring
    - [x] Complete documentation
    - [x] Tests and examples
    - [x] Fix broken MCP RAG tools
    - [x] Comprehensive testing and validation
  - Phase 6: Advanced AI Features (Medium Priority) - **COMPLETED**
    - [x] Advanced AI Reasoning
    - [ ] Enhanced Memory Systems

## DOCUMENTATION PREPARATION WORKFLOW

### Overview

This document outlines the standardized workflow for preparing project documentation using Basic Memory tools, following the successful restructuring of the MCP RAG Server documentation.

### Workflow Steps

#### 1. Project Setup and Memory Management

##### Before Starting Documentation Work
- **Verify Memory Project**: Always ensure you're on the correct memory project for the current project
- **Set Default Project**: If needed, create and set the memory project as default
- **Check Project Status**: Use `get_current_project()` to confirm active project

##### Memory Project Commands
```bash
# List available projects
mcp_c-basic-memory_list_memory_projects()

# Switch to project
mcp_c-basic-memory_switch_project("project-name")

# Set as default
mcp_c-basic-memory_set_default_project("project-name")

# Create new project if needed
mcp_c-basic-memory_create_memory_project("project-name", "project-path", set_default=True)
```

#### 2. Documentation Structure Planning

##### Folder Organization
Always organize documentation in logical subfolders:
```
docs/
├── 00-overview/           # Main documentation index and project overview
├── 01-architecture/       # System architecture and design
├── 02-installation/       # Setup and installation guides
├── 03-api/               # API documentation and references
├── 04-development/       # Development guides, phases, refactoring
└── 05-troubleshooting/   # Troubleshooting and debugging guides
```

##### Naming Conventions
- **Kebab-case**: All file names must use kebab-case format
  - ✅ `installation-guide.md`
  - ✅ `api-reference.md`
  - ✅ `troubleshooting-guide.md`
  - ❌ `installation_guide.md`
  - ❌ `InstallationGuide.md`

#### 3. Content Generation Process

##### Using Basic Memory write_note Tool
Always use `mcp_c-basic-memory_write_note` for creating documentation:

```python
mcp_c-basic-memory_write_note(
    title="filename-without-extension",
    content="# Document Title\n\nContent here...",
    folder="docs/subfolder-name",
    tags=['relevant', 'tags', 'obsidian-compatible']
)
```

##### Content Requirements
- **Atomic Notes**: Each note should address a single concept
- **Obsidian Links**: Use proper Obsidian-style linking
  - `[[../folder/filename]]` for relative links
  - `[[filename|display text]]` for custom display text
- **English Language**: All content must be in English
- **Cross-references**: Include related documentation links

#### 4. Link Management

##### Obsidian-Style Linking
- **Relative Paths**: Use `../` for parent directory navigation
- **Consistent Format**: Always use `[[../folder/filename]]` pattern
- **Display Text**: Use `[[../folder/filename|Display Text]]` for better readability

##### Example Link Structure
```markdown
## Related Documentation

- [[../01-architecture/system-architecture|System Architecture]]
- [[../02-installation/installation-guide|Installation Guide]]
- [[../03-api/api-reference|API Reference]]
- [[../04-development/development-phases|Development Phases]]
- [[../05-troubleshooting/troubleshooting-guide|Troubleshooting Guide]]
```

#### 5. Quality Assurance

##### Before Finalizing
- **Check All Links**: Ensure all cross-references are correct
- **Verify Structure**: Confirm folder organization is logical
- **Test Obsidian Compatibility**: Verify links work in Obsidian
- **Review Content**: Ensure atomic note structure is maintained

##### Validation Checklist
- [ ] All files use kebab-case naming
- [ ] All links use proper Obsidian format
- [ ] Each note addresses single concept (atomic)
- [ ] Cross-references are comprehensive
- [ ] Content is in English
- [ ] Tags are relevant and descriptive

#### 6. Project Integration

##### Update Main README
Always update the main project README.md with new documentation links:

```markdown
## Documentation

Comprehensive documentation is available in the `docs/` directory:

- **Documentation Index**: [[docs/00-overview/documentation-index.md]]
- **Project Overview**: [[docs/00-overview/project-overview.md]]
- **System Architecture**: [[docs/01-architecture/system-architecture.md]]
- **Installation Guide**: [[docs/02-installation/installation-guide.md]]
- **API Reference**: [[docs/03-api/api-reference.md]]
- **Development Phases**: [[docs/04-development/development-phases.md]]
- **Project Refactoring**: [[docs/04-development/project-refactoring.md]]
- **Troubleshooting**: [[docs/05-troubleshooting/troubleshooting-guide.md]]
```

### Best Practices

#### Documentation Standards
1. **Consistency**: Follow established patterns and conventions
2. **Completeness**: Ensure comprehensive coverage of topics
3. **Clarity**: Write clear, concise, and well-organized content
4. **Maintainability**: Structure for easy updates and modifications

#### Technical Requirements
1. **Basic Memory Integration**: Always use `write_note` for creation
2. **Obsidian Compatibility**: Ensure proper markdown and linking
3. **Version Control**: Commit documentation with related code changes
4. **Cross-Platform**: Ensure compatibility across different systems

#### Workflow Efficiency
1. **Plan First**: Always create a plan before starting
2. **Batch Operations**: Group related documentation tasks
3. **Validation**: Verify each step before proceeding
4. **Documentation**: Document the documentation process itself

### Example Workflow

#### For New Project Documentation
1. **Setup**: Verify/create memory project
2. **Plan**: Create documentation structure plan
3. **Create**: Generate atomic notes using `write_note`
4. **Link**: Establish cross-references
5. **Validate**: Check all links and structure
6. **Integrate**: Update main README and project files

#### For Documentation Updates
1. **Backup**: Create backup of existing documentation
2. **Plan**: Identify what needs to be updated
3. **Execute**: Apply changes using `write_note`
4. **Test**: Verify all links and references
5. **Commit**: Update version control with changes

### Success Metrics

#### Quality Indicators
- ✅ All files follow kebab-case naming
- ✅ All links use proper Obsidian format
- ✅ Atomic note structure maintained
- ✅ Comprehensive cross-referencing
- ✅ English language throughout
- ✅ Logical folder organization

#### Efficiency Indicators
- ✅ Documentation created using Basic Memory tools
- ✅ Consistent workflow followed
- ✅ All validation steps completed
- ✅ Project integration successful

## Related Documentation

- [[../00-overview/documentation-index|Documentation Index]]
- [[../04-development/project-refactoring|Project Refactoring History]]
- [[../02-installation/installation-guide|Installation Guide]]

## GIT Workflow Rules

- Always stage all changes using `git add .` before committing.
- Commit changes with descriptive messages, including details of reorganizations, new files, updates, and cleanup.
- Always check `git status` before committing to review changes.
- After committing, verify there are no remaining untracked files (excluding auto-generated files like SpecStory history files, unless specifically needed).
- Before moving to the next task, always check the current project status and action plan.

## Phase 5 Completion and Phase 6 Planning

### Overview

#### Phase 5
- [x] Fix broken MCP RAG tools
- [x] Comprehensive testing and validation
- [x] Complete documentation

#### Phase 6
- [x] Advanced AI Reasoning
- [ ] Enhanced Memory Systems